{"version":3,"file":"manifestpeek.entityaction-BZSO3dbV.js","sources":["../../umbraco.community.manifestpeek.client/src/EntityAction/manifestpeek.entityaction.ts"],"sourcesContent":["import { UmbControllerHost } from \"@umbraco-cms/backoffice/controller-api\";\r\nimport { UmbEntityActionArgs, UmbEntityActionBase } from \"@umbraco-cms/backoffice/entity-action\";\r\nimport { UmbBackofficeExtensionRegistry, umbExtensionsRegistry } from '@umbraco-cms/backoffice/extension-registry';\r\n\r\nexport class ManifestPeekEntityAction extends UmbEntityActionBase<never> {\r\n\r\n    private _extensionRegistry: UmbBackofficeExtensionRegistry;\r\n\r\n    constructor(host: UmbControllerHost, args: UmbEntityActionArgs<never>) {\r\n        super(host, args);\r\n        this._extensionRegistry = umbExtensionsRegistry;\r\n    }\r\n\r\n    async execute() {\r\n        console.log('BOB', this.args);\r\n\r\n        const extension = this._extensionRegistry.getByAlias('Umb.Store.PartialView.Detail');\r\n        console.log(extension); \r\n        // This works as we don;t know what the manifest strongly typed object is we will need to pass this to a modal\r\n        // And then for each property on the object list it out\r\n        // Some could be objects so we would need to recurse\r\n\r\n        // Could use JSON string and print that out in the modal in some <code> block or something\r\n    }\r\n}\r\n\r\n\r\nexport { ManifestPeekEntityAction as api };"],"names":["ManifestPeekEntityAction","UmbEntityActionBase","host","args","umbExtensionsRegistry","extension"],"mappings":";;AAIO,MAAMA,UAAiCC,EAA2B;AAAA,EAIrE,YAAYC,GAAyBC,GAAkC;AACnE,UAAMD,GAAMC,CAAI,GAChB,KAAK,qBAAqBC;AAAA,EAC9B;AAAA,EAEA,MAAM,UAAU;AACJ,YAAA,IAAI,OAAO,KAAK,IAAI;AAE5B,UAAMC,IAAY,KAAK,mBAAmB,WAAW,8BAA8B;AACnF,YAAQ,IAAIA,CAAS;AAAA,EAMzB;AACJ;"}